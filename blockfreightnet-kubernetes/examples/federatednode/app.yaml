apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.tmpl.yml
    kompose.version: 1.5.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: mongodb-base
  name: mongodb-base
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: mongodb-base
    spec:
      containers:
      - image: mongo:3.2
        name: mongodb-base
        ports:
        - containerPort: 27017
        resources: {}
        volumeMounts:
        - mountPath: /data/db
          name: mongodb-data
      restartPolicy: Always
      volumes:
      - name: mongodb-data
        persistentVolumeClaim:
          claimName: mongodb-data
status: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.tmpl.yml
    kompose.version: 1.5.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: mongodb-base
  name: mongodb-base
spec:
  ports:
  - name: "27017"
    port: 27017
    targetPort: 27017
  selector:
    io.kompose.service: mongodb-base
status:
  loadBalancer: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: mongodb-data
  name: mongodb-data
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: redis-claim0
  name: redis-claim0
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.tmpl.yml
    kompose.version: 1.5.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: redis
  name: redis
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: redis
    spec:
      containers:
      - args:
        - redis-server
        - /usr/local/etc/redis/redis.conf
        image: redis:3.2
        name: redis
        resources: {}
        volumeMounts:
        - mountPath: /usr/local/etc/redis/redis.conf
          name: redis-claim0
      restartPolicy: Always
      volumes:
      - name: redis-claim0
        persistentVolumeClaim:
          claimName: redis-claim0
status: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.tmpl.yml
    kompose.version: 1.5.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: redis
  name: redis
spec:
  clusterIP: None
  ports:
  - name: headless
    port: 55555
    targetPort: 0
  selector:
    io.kompose.service: redis
status:
  loadBalancer: {}

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: bitcoin-base-claim0
  name: bitcoin-base-claim0
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.tmpl.yml
    kompose.version: 1.5.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: bitcoin-base
  name: bitcoin-base
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: bitcoin-base
    spec:
      containers:
      - image: counterparty/bitcoin
        name: bitcoin-base
        resources: {}
        volumeMounts:
        - mountPath: /root/.bitcoin-config
          name: bitcoin-base-claim0
        - mountPath: /root/.bitcoin/
          name: bitcoin-data
      restartPolicy: Always
      volumes:
      - name: bitcoin-base-claim0
        persistentVolumeClaim:
          claimName: bitcoin-base-claim0
      - name: bitcoin-data
        persistentVolumeClaim:
          claimName: bitcoin-data
status: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.tmpl.yml
    kompose.version: 1.5.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: bitcoin-base
  name: bitcoin-base
spec:
  clusterIP: None
  ports:
  - name: headless
    port: 55555
    targetPort: 0
  selector:
    io.kompose.service: bitcoin-base
status:
  loadBalancer: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: bitcoin-data
  name: bitcoin-data
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: counterparty-claim0
  name: counterparty-claim0
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: counterparty-claim1
  name: counterparty-claim1
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: counterparty-claim2
  name: counterparty-claim2
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: counterparty-data
  name: counterparty-data
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.full.yml
    kompose.version: 1.5.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: counterparty
  name: counterparty
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: counterparty
    spec:
      containers:
      - env:
        - name: PARAMS
          value: --config-file=/root/.config/counterparty/server.conf
        image: 'counterparty/counterparty-server'
        name: counterparty
        command:
        - bash
        - "-c"
        - |
          set -ex

          cd counterparty-lib
          pip3 install -r requirements.txt
          python3 setup.py develop
          python3 setup.py install_apsw
          python3 setup.py install_serpent
                
          cd ../counterparty-cli
          pip3 install -r requirements.txt
          python3 setup.py develop

          cd ../counterparty-lib

          cp docker/server.conf /root/.config/counterparty/server.conf
          cp docker/start.sh /usr/local/bin/start.sh
          chmod a+x /usr/local/bin/start.sh

          counterparty-server bootstrap --quiet
        ports:
        - containerPort: 4000
        resources: {}
        volumeMounts:
        - mountPath: /root/.config/counterparty
          name: counterparty-claim2
        - mountPath: /root/.local/share/counterparty
          name: counterparty-data
      restartPolicy: Always
      volumes:
      - name: counterparty-claim2
        persistentVolumeClaim:
          claimName: counterparty-claim2
      - name: counterparty-data
        persistentVolumeClaim:
          claimName: counterparty-data
status: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.full.yml
    kompose.version: 1.5.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: counterparty
  name: counterparty
spec:
  ports:
  - name: "4000"
    port: 4000
    targetPort: 4000
  selector:
    io.kompose.service: counterparty
status:
  loadBalancer: {}

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: counterblock-claim0
  name: counterblock-claim0
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: counterblock-claim1
  name: counterblock-claim1
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: counterblock-data
  name: counterblock-data
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.full.yml
    kompose.version: 1.5.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: counterblock
  name: counterblock
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: counterblock
    spec:
      containers:
      - env:
        - name: PARAMS
          value: --config-file=/root/.config/counterblock/server.conf
        image: 'counterparty/counterblock'
        name: counterblock  
        command:
        - bash
        - "-c"
        - |
          set -ex   
          pip3 install -r requirements.txt
          python3 setup.py develop

          cp docker/server.conf /root/.config/counterblock/server.conf
          cp docker/modules.conf /root/.config/counterblock/modules.conf
          cp docker/counterwallet.conf /root/.config/counterblock/counterwallet.conf

          counterblock --backend-password=rpc --counterparty-password=rpc --mongodb-connect=mongodb-base:27017 --counterparty-connect=counterparty server 
        ports:
        - containerPort: 4100
        resources: {}
        volumeMounts:
        - mountPath: /root/.config/counterblock
          name: counterblock-claim1
        - mountPath: /root/.local/share/counterblock
          name: counterblock-data
      restartPolicy: Always
      volumes:
      - name: counterblock-claim1
        persistentVolumeClaim:
          claimName: counterblock-claim1
      - name: counterblock-data
        persistentVolumeClaim:
          claimName: counterblock-data
status: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.full.yml
    kompose.version: 1.5.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: counterblock
  name: counterblock
spec:
  ports:
  - name: "4100"
    port: 4100
    targetPort: 4100
  selector:
    io.kompose.service: counterblock
status:
  loadBalancer: {}

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: armory-data
  name: armory-data
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: armory-utxsvr-claim0
  name: armory-utxsvr-claim0
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.full.yml
    kompose.version: 1.5.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: armory-utxsvr
  name: armory-utxsvr
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: armory-utxsvr
    spec:
      containers:
      - env:
        - name: BITCOIND_URL
          value: http://rpc:rpc@bitcoin:8332
        - name: RPC_HOST
          value: 0.0.0.0
        image: 'counterparty/armory-utxsvr'
        name: armory-utxsvr
        resources: {}
        volumeMounts:
        - mountPath: /root/.armory
          name: armory-data
        - mountPath: /root/.bitcoin/
          name: bitcoin-data
      restartPolicy: Always
      volumes:
      - name: armory-data
        persistentVolumeClaim:
          claimName: armory-data
      - name: bitcoin-data
        persistentVolumeClaim:
          claimName: bitcoin-data
status: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.full.yml
    kompose.version: 1.5.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: armory-utxsvr
  name: armory-utxsvr
spec:
  clusterIP: None
  ports:
  - name: headless
    port: 55555
    targetPort: 0
  selector:
    io.kompose.service: armory-utxsvr
status:
  loadBalancer: {}

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: counterwallet-claim0
  name: counterwallet-claim0
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: counterwallet-claim1
  name: counterwallet-claim1
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.full.yml
    kompose.version: 1.5.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: counterwallet
  name: counterwallet
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: counterwallet
    spec:
      containers:
      - image: 'counterparty/counterwallet'
        name: counterwallet
        ports:
        - containerPort: 80
        - containerPort: 443
        resources: {}
        volumeMounts:
        - mountPath: /ssl-config
          name: counterwallet-claim1
        - mountPath: /counterblock-data
          name: counterblock-data
      restartPolicy: Always
      volumes:
      - name: counterwallet-claim1
        persistentVolumeClaim:
          claimName: counterwallet-claim1
      - name: counterblock-data
        persistentVolumeClaim:
          claimName: counterblock-data
status: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.full.yml
    kompose.version: 1.5.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: counterwallet
  name: counterwallet
spec:
  ports:
  - name: "80"
    port: 80
    targetPort: 80
  - name: "443"
    port: 443
    targetPort: 443
  selector:
    io.kompose.service: counterwallet
status:
  loadBalancer: {}
